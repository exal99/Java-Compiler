PARSER_BEGIN(MiniJavaParser)
package lexer;

import syntaxtree.*;

import java.io.FileInputStream;
import java.io.FileNotFoundException;

class MiniJavaParser {
	public static void main(String[] args) throws FileNotFoundException, ParseException{
		MiniJavaParser parser = new MiniJavaParser(new FileInputStream("src\\programs\\test.mjava"));
		parser.Program();
	}
}


PARSER_END(MiniJavaParser)


TOKEN: {
  < CLASS : "class" >
| < #DIGIT : ["0"-"9"] >
| < #ALPHA : (["a"-"z"]|["A"-"Z"]) >
| < NUM : (< DIGIT >)+ >
| < BIN_OP : (["<", "+", "-", "*"] | "&&") >
| < MAIN : "public static void main" >
| < EXTENDS : "extends" >
| < IF : "if" >
| < ELSE : "else" >
| < WHILE : "while" >
| < TRUE : "true" >
| < FALSE : "false" >
| < NEW : "new" >
| < INT : "int" >
| < BOOL : "boolean" >
| < PRINT: "System.out.println" >
| < THIS: "this" >
| < LENGTH: "length" >
| < SEMI: ";" >
| < COMMA: "," >
| < ASSIGN : "=" >
| < RETURN : "return" >
|  "(" | ")" | "{" | "}" | "[" | "]"
| "public" | "String"
| < ID : (< ALPHA > | "_") ("_" | < ALPHA > | < DIGIT >)* >
}

SKIP: {
  < "//" (~["\n","\r"])* ("\n" | "\r" | "\r\n") >
| < "/*" (~["*"])* "*" (~["*","/"] (~["*"])* "*" | "*")* "/">
| " "
| "\t"
| "\n"
| "\r"
}

Program Program() :
{MainClass m; ClassDecl cd; ClassDeclList c = new ClassDeclList(-1);}
{ m=MainClass() (cd=ClassDecl() { c.addElement(cd); } )* < EOF >
   { return new Program(0, m, c); }
}

Identifier Id() :
{ String name; int pos;}
{ name = < ID >.image { return new Identifier(token.beginLine * 1000 + token.beginColumn, name); } }
  
MainClass MainClass() : 
{int pos; Statement s; Identifier name, argName;}
{ <CLASS> { pos=token.beginLine * 1000 + token.beginColumn; }
  name=Id() "{" <MAIN> "(" "String" "[]" argName=Id() ")" "{" s=Statement() "}" "}"
  { return new MainClass(pos, name, argName, s); }
}

ClassDecl ClassDecl() :
{int pos; Identifier name, extendName;
VarDecl v; VarDeclList vd = new VarDeclList(-1);
MethodDecl m; MethodDeclList md = new MethodDeclList(-1);}
{ <CLASS> { pos = token.beginLine*1000 + token.beginColumn; }
name = Id()
(
 "{" (v=VarDecl() { vd.addElement(v); })* (m = MethodDecl() { md.addElement(m); })* "}"
  {
    return new ClassDeclSimple(pos, name, vd, md);
  }
| <EXTENDS> extendName=Id() "{" (v=VarDecl() { vd.addElement(v); })*  (m = MethodDecl() { md.addElement(m); })* "}"
  {
    return new ClassDeclExtends(pos, name, extendName, vd, md);
  }
)
} 

VarDecl VarDecl() :
{Type t; Identifier i;}
{ t = Type() i = Id() <SEMI>
{
  return new VarDecl(t.getPos(), t, i);
}
}

MethodDecl MethodDecl() : 
{int pos; Type t; Identifier i; FormalList fl; VarDecl v; VarDeclList vl = new VarDeclList(-1);
 Statement s; StatementList sl = new StatementList(-1); Expression exp;}
{ "public" { pos=token.beginLine * 1000 + token.beginColumn; }
  t=Type() i=Id() "(" fl=FormalList() ")" "{" (LOOKAHEAD(2) v=VarDecl() { vl.addElement(v); })*
  (s=Statement() { sl.addElement(s); })* <RETURN> exp=Expression() <SEMI> "}"
{
  return new MethodDecl(pos, t, i, fl, vl, sl, exp);
}
}

FormalList FormalList() : 
{FormalList fl = new FormalList(-1); int pos; Type t; Identifier i; Formal f;}
{ (t=Type() { pos=token.beginLine * 1000 + token.beginColumn; }
   i=Id() { fl.addElement(new Formal(pos, t, i)); } (f=FormalRest() { fl.addElement(f); })*)?
{
  return fl;
}
}

Formal FormalRest() : 
{int pos; Type t; Identifier i;}
{ "," { pos=token.beginLine * 1000 + token.beginColumn; } t=Type() i=Id()
{
  return new Formal(pos, t, i);
}
}

Type Type() :
{Type t;}
{ < INT > { t = new IntegerType(token.beginLine * 1000 + token.beginColumn); } ("[]" { t = new IntArrayType(token.beginLine * 1000 + token.beginColumn); })?
| < BOOL > { t = new BooleanType(token.beginLine * 1000 + token.beginColumn); }
| < ID > { t = new IdentifierType(token.beginLine * 1000 + token.beginColumn, token.image); }
{
  return t;
}
}

Statement Statement() :
{int pos; Statement s1; Statement s2; StatementList sl = new StatementList(-1); Expression exp1; Expression exp2; Identifier i;}
{ "{" { pos = token.beginLine * 1000 + token.beginColumn; } (s1 = Statement() { sl.addElement(s1); })* "}"
  { return new Block(pos, sl); }
| <IF> { pos = token.beginLine * 1000 + token.beginColumn; } "(" exp1=Expression() ")" s1=Statement() <ELSE> s2=Statement()
  { return new If(pos, exp1, s1, s2); }
| < WHILE > { pos = token.beginLine * 1000 + token.beginColumn; } "(" exp1=Expression() ")" s1=Statement()
  { return new While(pos, exp1, s1); }
| < PRINT > { pos = token.beginLine * 1000 + token.beginColumn; } "(" exp1=Expression() ")" < SEMI >
  { return new Print(pos, exp1); }
| i=Id() { pos = token.beginLine * 1000 + token.beginColumn; } (
     < ASSIGN > exp1=Expression() < SEMI >
    { return new Assign(pos, i, exp1); } 
  |  "[" exp1=Expression() "]" < ASSIGN > exp2=Expression() < SEMI >
    { return new ArrayAssign(pos, i, exp1, exp2); }
  )
}

Expression Expression() :
{int pos; Identifier i; Expression exp;}
{ < NUM >   { pos= token.beginLine * 1000 + token.beginColumn; } exp=ExpressionRest(pos, new IntegerLiteral(pos, Integer.parseInt(token.image))) { return exp; }
| < TRUE >  { pos= token.beginLine * 1000 + token.beginColumn; } exp=ExpressionRest(pos, new True(pos)) { return exp; }
| < FALSE > { pos= token.beginLine * 1000 + token.beginColumn; } exp=ExpressionRest(pos, new False(pos)) { return exp; }
| < ID >    { pos= token.beginLine * 1000 + token.beginColumn; } exp=ExpressionRest(pos, new IdentifierExpression(pos, token.image)) { return exp; }
| < THIS >  { pos= token.beginLine * 1000 + token.beginColumn; } exp=ExpressionRest(pos, new This(pos)) { return exp; }
| < NEW >   { pos = token.beginLine * 1000 + token.beginColumn;}
  (
      i=Id() "(" ")" exp=ExpressionRest(pos, new NewObject(pos, i)) { return exp; }
    | < INT > "[" exp=Expression() "]" { return new NewArray(pos, exp); }
  )
| "!" { pos=token.beginLine * 1000 + token.beginColumn; } exp=Expression() { return new Not(pos, exp); }
| "(" exp=Expression() ")" { return exp; }
}

Expression ExpressionRest(int pos, Expression exp1) :
{Token t; Expression exp2; Identifier i; ExpressionList expl;}
{ (t=< BIN_OP > exp2=Expression()
  {
    switch(t.image) {
      case "<":
        return new LessThan(pos, exp1, exp2);
      case "+":
        return new Plus(pos, exp1, exp2);
      case "-":
        return new Minus(pos, exp1, exp2);
      case "*":
        return new Times(pos, exp1, exp2);
      case "&&":
        return new And(pos, exp1, exp2);
    }
  }
| "[" exp2=Expression() "]" { return new ArrayLookup(pos, exp1, exp2); }
| LOOKAHEAD(2) "." "length" { return new ArrayLength(pos, exp1); }
| LOOKAHEAD(2) "." i=Id() "(" expl=ExpressionList() ")" { return new Call(pos, exp1, i, expl); }
)? { return exp1; }
}
ExpressionList ExpressionList() :
{Expression exp; ExpressionList expL = new ExpressionList(-1);} 
{ (exp=Expression() { expL.addElement(exp); } ("," exp=Expression() { expL.addElement(exp); })*)?
  { return expL; }
}

